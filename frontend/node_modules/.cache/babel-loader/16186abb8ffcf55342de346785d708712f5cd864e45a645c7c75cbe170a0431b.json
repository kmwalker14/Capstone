{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\n\n/**\n * Matches a highlight to a ==highlight== on input.\n */\nconst inputRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))$/;\n/**\n * Matches a highlight to a ==highlight== on paste.\n */\nconst pasteRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))/g;\n/**\n * This extension allows you to highlight text.\n * @see https://www.tiptap.dev/api/marks/highlight\n */\nconst Highlight = Mark.create({\n  name: 'highlight',\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {}\n    };\n  },\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {};\n    }\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color') || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {};\n          }\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}; color: inherit`\n          };\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'mark'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setHighlight: attributes => ({\n        commands\n      }) => {\n        return commands.setMark(this.name, attributes);\n      },\n      toggleHighlight: attributes => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name, attributes);\n      },\n      unsetHighlight: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Highlight, Highlight as default, inputRegex, pasteRegex };","map":{"version":3,"names":["inputRegex","pasteRegex","Highlight","Mark","create","name","addOptions","multicolor","HTMLAttributes","addAttributes","options","color","default","parseHTML","element","getAttribute","style","backgroundColor","renderHTML","attributes","tag","mergeAttributes","addCommands","setHighlight","commands","setMark","toggleHighlight","toggleMark","unsetHighlight","unsetMark","addKeyboardShortcuts","Mod-Shift-h","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["../src/highlight.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface HighlightOptions {\n  /**\n   * Allow multiple highlight colors\n   * @default false\n   * @example true\n   */\n  multicolor: boolean,\n\n  /**\n   * HTML attributes to add to the highlight element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    highlight: {\n      /**\n       * Set a highlight mark\n       * @param attributes The highlight attributes\n       * @example editor.commands.setHighlight({ color: 'red' })\n       */\n      setHighlight: (attributes?: { color: string }) => ReturnType,\n      /**\n       * Toggle a highlight mark\n       * @param attributes The highlight attributes\n       * @example editor.commands.toggleHighlight({ color: 'red' })\n       */\n      toggleHighlight: (attributes?: { color: string }) => ReturnType,\n      /**\n       * Unset a highlight mark\n       * @example editor.commands.unsetHighlight()\n       */\n      unsetHighlight: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches a highlight to a ==highlight== on input.\n */\nexport const inputRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))$/\n\n/**\n * Matches a highlight to a ==highlight== on paste.\n */\nexport const pasteRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))/g\n\n/**\n * This extension allows you to highlight text.\n * @see https://www.tiptap.dev/api/marks/highlight\n */\nexport const Highlight = Mark.create<HighlightOptions>({\n  name: 'highlight',\n\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {}\n    }\n\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color') || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {}\n          }\n\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}; color: inherit`,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'mark',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHighlight: attributes => ({ commands }) => {\n        return commands.setMark(this.name, attributes)\n      },\n      toggleHighlight: attributes => ({ commands }) => {\n        return commands.toggleMark(this.name, attributes)\n      },\n      unsetHighlight: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":";;AA+CA;;AAEG;AACI,MAAMA,UAAU,GAAG;AAE1B;;AAEG;AACI,MAAMC,UAAU,GAAG;AAE1B;;;AAGG;AACU,MAAAC,SAAS,GAAGC,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,UAAUA,CAAA;IACR,OAAO;MACLC,UAAU,EAAE,KAAK;MACjBC,cAAc,EAAE;KACjB;GACF;EAEDC,aAAaA,CAAA;IACX,IAAI,CAAC,IAAI,CAACC,OAAO,CAACH,UAAU,EAAE;MAC5B,OAAO,EAAE;;IAGX,OAAO;MACLI,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,SAAS,EAAEC,OAAO,IAAIA,OAAO,CAACC,YAAY,CAAC,YAAY,CAAC,IAAID,OAAO,CAACE,KAAK,CAACC,eAAe;QACzFC,UAAU,EAAEC,UAAU,IAAG;UACvB,IAAI,CAACA,UAAU,CAACR,KAAK,EAAE;YACrB,OAAO,EAAE;;UAGX,OAAO;YACL,YAAY,EAAEQ,UAAU,CAACR,KAAK;YAC9BK,KAAK,EAAE,qBAAqBG,UAAU,CAACR,KAAK;WAC7C;;MAEJ;KACF;GACF;EAEDE,SAASA,CAAA;IACP,OAAO,CACL;MACEO,GAAG,EAAE;IACN,EACF;GACF;EAEDF,UAAUA,CAAC;IAAEV;EAAc,CAAE;IAC3B,OAAO,CAAC,MAAM,EAAEa,eAAe,CAAC,IAAI,CAACX,OAAO,CAACF,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACjF;EAEDc,WAAWA,CAAA;IACT,OAAO;MACLC,YAAY,EAAEJ,UAAU,IAAI,CAAC;QAAEK;MAAQ,CAAE,KAAI;QAC3C,OAAOA,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACpB,IAAI,EAAEc,UAAU,CAAC;OAC/C;MACDO,eAAe,EAAEP,UAAU,IAAI,CAAC;QAAEK;MAAQ,CAAE,KAAI;QAC9C,OAAOA,QAAQ,CAACG,UAAU,CAAC,IAAI,CAACtB,IAAI,EAAEc,UAAU,CAAC;OAClD;MACDS,cAAc,EAAEA,CAAA,KAAM,CAAC;QAAEJ;MAAQ,CAAE,KAAI;QACrC,OAAOA,QAAQ,CAACK,SAAS,CAAC,IAAI,CAACxB,IAAI,CAAC;;KAEvC;GACF;EAEDyB,oBAAoBA,CAAA;IAClB,OAAO;MACL,aAAa,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACR,QAAQ,CAACE,eAAe;KAC1D;GACF;EAEDO,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAEnC,UAAU;MAChBoC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAElC,UAAU;MAChBmC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}