{"ast":null,"code":"import { computed } from \"vue\";\nimport AdminSidebarMenu from './components/AdminSidebarMenu.vue';\nimport SidebarMenu from \"./components/SidebarMenu.vue\";\n\n// Mock Auth0 function (simulating user authentication)\nconst mockAuth0 = {\n  getUser: () => {\n    // Return mock user data\n    return {\n      role: \"admin\"\n    }; // This is a mock role; it can be switched between 'admin' or 'student' for testing\n  }\n};\nexport default {\n  name: 'App',\n  components: {\n    AdminSidebarMenu,\n    SidebarMenu\n  },\n  setup() {\n    // Mock Auth0 - Get user role (replace with actual Auth0 logic later)\n    const user = mockAuth0.getUser(); // Simulate user retrieval (replace call with real Auth0 logic for retrieving the user's role)\n    const isAdmin = computed(() => user.role === \"admin\"); // Check if the user is an admin\n\n    // Store mock user in localStorage (store the mock user for the session)\n    if (!localStorage.getItem(\"user\")) {\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n    return {\n      isAdmin\n    };\n  },\n  data() {\n    return {\n      currentPage: 'adminhome' // Default to this page\n    };\n  }\n};","map":{"version":3,"names":["computed","AdminSidebarMenu","SidebarMenu","mockAuth0","getUser","role","name","components","setup","user","isAdmin","localStorage","getItem","setItem","JSON","stringify","data","currentPage"],"sources":["C:\\Users\\kiera\\Downloads\\Capstone-develop-database\\Capstone\\frontend\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- Show admin sidebar menu if user is an admin -->\r\n    <AdminSidebarMenu v-if=\"isAdmin\" />\r\n\r\n    <!-- Show student menu if user is not an admin -->\r\n    <SidebarMenu v-else />\r\n\r\n    <!-- Router will render component based on current route -->\r\n    <router-view></router-view>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {computed} from \"vue\";\r\nimport AdminSidebarMenu from './components/AdminSidebarMenu.vue';\r\nimport SidebarMenu from \"./components/SidebarMenu.vue\";\r\n\r\n// Mock Auth0 function (simulating user authentication)\r\nconst mockAuth0 = {\r\n  getUser: () => {\r\n    // Return mock user data\r\n    return {role: \"admin\"}; // This is a mock role; it can be switched between 'admin' or 'student' for testing\r\n  }\r\n};\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    AdminSidebarMenu,\r\n    SidebarMenu\r\n  },\r\n\r\n  setup() {\r\n    // Mock Auth0 - Get user role (replace with actual Auth0 logic later)\r\n    const user = mockAuth0.getUser(); // Simulate user retrieval (replace call with real Auth0 logic for retrieving the user's role)\r\n    const isAdmin = computed(() => user.role === \"admin\"); // Check if the user is an admin\r\n\r\n    // Store mock user in localStorage (store the mock user for the session)\r\n    if (!localStorage.getItem(\"user\")) {\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n    }\r\n\r\n    return {isAdmin};\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      currentPage: 'adminhome' // Default to this page\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Import CSS files if needed */\r\n  #app {\r\n    display: flex;\r\n    width: 100%;\r\n    max-width: 100vw;\r\n    min-height: 100vh;\r\n    overflow-x: hidden;\r\n  }\r\n</style>\r\n\r\n\r\n"],"mappings":"AAcA,SAAQA,QAAQ,QAAO,KAAK;AAC5B,OAAOC,gBAAe,MAAO,mCAAmC;AAChE,OAAOC,WAAU,MAAO,8BAA8B;;AAEtD;AACA,MAAMC,SAAQ,GAAI;EAChBC,OAAO,EAAEA,CAAA,KAAM;IACb;IACA,OAAO;MAACC,IAAI,EAAE;IAAO,CAAC,EAAE;EAC1B;AACF,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVN,gBAAgB;IAChBC;EACF,CAAC;EAEDM,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,IAAG,GAAIN,SAAS,CAACC,OAAO,CAAC,CAAC,EAAE;IAClC,MAAMM,OAAM,GAAIV,QAAQ,CAAC,MAAMS,IAAI,CAACJ,IAAG,KAAM,OAAO,CAAC,EAAE;;IAEvD;IACA,IAAI,CAACM,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,EAAE;MACjCD,YAAY,CAACE,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;IACpD;IAEA,OAAO;MAACC;IAAO,CAAC;EAClB,CAAC;EAEDM,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,WAAU,CAAE;IAC3B,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}